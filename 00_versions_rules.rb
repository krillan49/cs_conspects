puts '                                   Нумерация версий программ'

# Semantic Versioning / SemVer / семантические версии

# Ноомер версии например 3.1.5 называются как МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ версии

# 1. МАЖОРНУЮ версию увеличивают в двух случаях:
# а) С нуля до единицы - когда софт готов к использованию в production (об этом не говорится в документации к SemVer)
# б) С единицы выше    - когда вводятся обратно-несовместимые изменения (говорят breaks backwards compatibility) или когда происходит серьезное обновление. На новых мажерных версиях скорее всего программы старых мажерных версий не будут работать совсем.
# Заодно сбрасываем минорную и патч-версию в ноль.

# 2. МИНОРНУЮ версию увеличивают, когда вы добавляете новую функциональность, не нарушающую обратной совместимости. Дает понять, что эта программа новая и обратно с нее откатываться нельзя, тк появилась новая функциональность, которой нет на версии ниже и соответсвенно эта новая функциональность не будер работать в старых версиях.
# Заодно сбрасываем патч-версию в ноль.

# 3. ПАТЧ-версию увеличивают, когда вы делаете мелкие обратно совместимые исправления, например исправление багов. Программа остается в принципе такой же, отличаются, но ненамного

# 4. Дополнительные обозначения для предрелизных и билд-метаданных возможны как дополнения к МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ[формат].
# Например в версии «ruby 2.5.1p57» - метка «p57» по сути тоже означает номер патча: пятьдесят седьмой патч. Это, тоже патч, но еще менее значимый. Какие-то очень незначительные изменения, исправление багов, улучшение безопасности



puts '                                     Поддержка. LTS. EOL'

# Где-то в каких-то проектах можно обновить версию языка на новую, где-то нельзя и приходиться пользоваться старой. В итоге некоторые старые версии продолжают поддерживаться, тк на них написано уже много всего

# LTS (long-term support) версии - имеют долгосрочную поддержку
# EOL (end of life) версии       - уже пришли к концу поддержки

















#
