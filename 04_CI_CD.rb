puts '                          Как устроен процесс разработки в компании (CI, CD)'

# 1. CI - continuous integration / непрерывная интеграция - автотест при коммитах в общий репозиторий
# Когда команда делает коммшты в один репозиторий, то каждый подтягивает к себе изменения (git pull) в процессе, поэтому шанс ошибки постоянно возрастает. Поэтому нужны тесты которые будут выполняться автоматически, когда кто-либо делает новый коммит (наш сервер подтягивает все изменения в репозитории и запускает тесты), результат теста приходит всей команде, соответсвенно вся команда узнает об ошибке сразу же, а не когда-то потом, когда "поверх нее" будет сделано еще много коммитов.

# Для связи используется например hipchat, который подключен к гитхабу и тестовому серверу и сообщает о сделанных коммитах и ошибках в нем. Это, если нужно, может видеть и заказчик и понимать, что работа идет и может из чата нажать на ссылки коммитов и посмотреть. В итоге получается лог за все время работы.


# 2. CD - continuous delivery / непрерывная доставка - автозаливка на веб-сервер
# При заливке коммитов на хостинг, если коммитов много и много разработчиков, то тратится много времени на заливку. Поэтому в большинстве компаний заливка на веб сервер автоматизирована. Но обычно заливают не сразу на веб сервер, а сначала на постановочный сервер(staging) где будет уже ручное тестирование тестировщиками

# Integration tests - автоматическое тестирование, происходит между нашим рабочим сервером и staging
# https://github.com/watir/watir                   библиотека на Руби для для интеграционного тестирования
# https://github.com/SeleniumHQ/selenium           инструмент для интеграционного тестирования


# 3. KANBAN-доска. Например:
# http://kanbanflow.com/
# http://trello.com/
# Тоже можно привязать к hipchat


# 4. CI CD полная схема работы
# Сделали коммит -> пришло сообщение о коммите в хипчате -> рабочий сервер проверил коммит -> пришло сообщение о проверке в хипчате -> Integration tests -> пришло сообщение о проверке в хипчате -> сервер залил изменение на хостинг(или постановочный сервер)

#               owner      programmer
#                |   ______|      |
# KANBAN------hipchat ______ github -------
#             |  |                        |
#             |  |__________ test server__|
#             |                |
#             |____________Integration tests
#                              |
#                          www (staging) --- QA


# Методология разработки:
# agile - гибкая разработка, те требования появляются со временем
# scrum - подвид от agile. Это определенный подход к разработке, который использует KANBAN


# Большинство CI-процессов можно описать по следующему алгоритму.
# При открытии каждого Pull Request (запроса на включение изменений) и отправке новых изменений, Git-сервер отправляет уведомление CI-серверу.
# CI-сервер клонирует репозиторий, проверяет исходную ветку (например bugfix/wrong-sorting) и сливает ее с основной веткой master.
# Затем запускается скрипт сборки. Например ./gradlew build.
# Если команда возвращает код «0», то сборка прошла успешно. Все остальные значения считаются ошибкой.
# CI-сервер отправляет запрос на Git-сервер с результатом сборки.
# Если сборка прошла без ошибок, то Pull Request разрешается слить. В противном случае он блокируется.
# Данный процесс гарантирует, что код, попадающий в ветку master, не сломает дальнейшие сборки.



puts '                                             Инструменты'

# На рынке доступно множество решений по автоматизации процессов CI/CD. Ниже представлено несколько продуктов.

# Jenkins
# . Один из самых востребованных инструментов CI/CD в мире. Свою популярность он заслужил, благодаря политике открытого кода (open-source). То есть вам не нужно ни за что платить. В Jenkins вы можете императивно описывать конвейеры сборки с помощью

# Groovy
# . С одной стороны это достаточно гибкое решение, но с другой – требует более высокого уровня квалификации.

# GitHub Actions
# . Этот инструмент для CI/CD доступен для GitHub и GitHub Enterprise. В отличие от Jenkins, GitHub Actions предлагает декларативные сценарии сборки с YAML-конфигурацией. Кроме того, в данном решении доступна интеграция с различными системами обеспечения качества (например SonarCube). Таким образом, сборку можно описать в нескольких текстовых строках.

# GitLab CI
# . Во многом похож на GitHub Actions, но со своими особенностями. Например, GitLab CI может указывать на определенные тесты, вызывающие ошибку в сборке.

# Travis CI
# . Облачный CI/CD-сервис. Предлагает множество возможностей, не требующих сложных настроек. Например, шифрование данных, которые следует скрыть в публичном репозитории. Есть и приятный бонус в том, что Travis CI можно совершенно бесплатно использовать в публичных open-source проектах на GitHub, GitLab и BitBucket.




















#
